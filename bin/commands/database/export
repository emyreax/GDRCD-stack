#!/usr/bin/env bash

importLib "lib/lib-docker.sh"

# ---------------------------------------------------------------------
# Variables
# ---------------------------------------------------------------------

# Get current file name
CURRENT_FILE_NAME="$(basename "${BASH_SOURCE[0]}")"
# Get directory name
CURRENT_DIR_NAME="$(basename "$(dirname "${BASH_SOURCE[0]}")")"

# Save command name
args=("$@")
# Set service name by arguments or by current directory name
SERVICE_NAME="${args[0]}"
COMMAND_NAME="${args[1]}"

# Commands variables
DATABASE_NAME=""
FILE=""
COMPRESS="false"

# ---------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------

# Function for showing usage of this command
usage() {
  helpify_title "${SERVICE_NAME:-${CURRENT_DIR_NAME}} export" "[OPTIONS...] DATABASE_NAME [FILE]"
  helpify_subtitle "Export a database into a dump file"; echo;
  helpify_subtitle "OPTIONS:"
  helpify "-h, --help"          "Show this help"
  helpify "-c, --compress"      "Export a compressed dump file"
}

# Function for showing usage of this command for help
usage4help() {
  helpify "export"       "Export a database into a dump file"
}

# ---------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------

#---------------------------PARSE ARGUMENTS-------------------------------#

# Parse arguments
while [[ $# -gt 0 ]]; do
  # if the argument is the command name, skip it
  if [[ "$1" == "${COMMAND_NAME}" || "$1" == "${SERVICE_NAME}" ]]; then
    shift; continue
  fi

  #
  case "$1" in
    -h|--help)
      need_help="true"; shift;
      ;;
    -c|--compress)
      COMPRESS="true"; shift;
	  ;;
    *)
    	# First argument is the database name
    	if [[ -z "${DATABASE_NAME}" ]]; then
    		DATABASE_NAME="$1"; shift;
    	# Second argument is the file
      elif [[ -z "${FILE}" ]]; then
        FILE="$1"; shift;
      # Other arguments are not allowed
      else
        messageUnknownCommand "${SERVICE_NAME:-${CURRENT_DIR_NAME}} ${COMMAND_NAME}" "$1"; exit 1;
      fi
      ;;
  esac
done

# Execute post argument parsing checks
finalize_argument_parsing

#---------------------------RUN COMMAND-------------------------------#

export() {
  # Preliminary checks
  isContainerExist "${SERVICE_NAME}"
  isContainerRunning "${SERVICE_NAME}"

  # Check if database name is empty
  if [[ -z "${DATABASE_NAME}" ]]; then
  	prompt -e "Database name is required";
  	exit 1;
  fi

  # Check if file is empty, set default file name
  if [[ -z "${FILE}" ]]; then
  	FILE="${DATABASE_NAME}.sql"
  fi

  # Check if file name is a dump file
  if [[ "${FILE}" != *.sql ]]; then
  	prompt -e "File name must be a dump file (.sql)";
  	exit 1;
  fi

  # Remove previous file if exists
  if [[ -f "${FILE}" ]]; then
    rm "${FILE}"
  fi

  #
  prompt -i "Exporting ${DATABASE_NAME} into ${FILE} file..."
  docker exec -i "${PROJECT}"_database mysqldump --routines -uroot -p"${MARIADB_ROOT_PASSWORD}" "${DATABASE_NAME}" > "${FILE}" || exit 1

  # Execute gzip if compress option is true
  if [[ "${COMPRESS}" == "true" ]]; then
    prompt -i "Compressing ${FILE} file..."
    gzip "${FILE}"
  fi
}

# Run command if this file is the command file
if [[ "${COMMAND_NAME}" == "${CURRENT_FILE_NAME}" ]]; then
  export
fi