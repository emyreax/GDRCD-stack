#!/usr/bin/env bash

importLib "lib/lib-docker.sh"

# ---------------------------------------------------------------------
# Variables
# ---------------------------------------------------------------------

# Get current file name
CURRENT_FILE_NAME="$(basename "${BASH_SOURCE[0]}")"
# Get directory name
CURRENT_DIR_NAME="$(basename "$(dirname "${BASH_SOURCE[0]}")")"

# Save command name
args=("$@")
# Set service name by arguments or by current directory name
SERVICE_NAME="${args[0]}"
COMMAND_NAME="${args[1]}"

# Commands variables
DATABASE_NAME=""

# ---------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------

# Function for showing usage of this command
usage() {
  helpify_title "${SERVICE_NAME:-${CURRENT_DIR_NAME}} refresh" "[OPTIONS...] DATABASE_NAME"
  helpify_subtitle "Clean all tables in the database"
  helpify_subtitle "OPTIONS:"
  helpify "-h, --help"          "Show this help"
}

# Function for showing usage of this command for help
usage4help() {
  helpify "refresh"       "Clean all tables in the database"
}

# ---------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------

#---------------------------PARSE ARGUMENTS-------------------------------#

# Parse arguments
while [[ $# -gt 0 ]]; do
  # if the argument is the command name, skip it
  if [[ "$1" == "${COMMAND_NAME}" || "$1" == "${SERVICE_NAME}" ]]; then
    shift; continue
  fi

  #
  case "$1" in
    -h|--help)
      need_help="true"; shift;
      ;;
    *)
    	# First argument is the database name
    	if [[ -z "${DATABASE_NAME}" ]]; then
    		DATABASE_NAME="$1"; shift;
      # Other arguments are not allowed
      else
        messageUnknownCommand "${SERVICE_NAME:-${CURRENT_DIR_NAME}} ${COMMAND_NAME}" "$1"; exit 1;
      fi
      ;;
  esac
done

# Execute post argument parsing checks
finalize_argument_parsing

#---------------------------RUN COMMAND-------------------------------#

refresh() {
  # Preliminary checks
  isContainerExist "${SERVICE_NAME}"
  isContainerRunning "${SERVICE_NAME}"

  # Check if database name is empty
  if [[ -z "${DATABASE_NAME}" ]]; then
  	prompt -e "Database name is required";
  	exit 1;
  fi

  # Prompt
  prompt -i "Refreshing database ${DATABASE_NAME}..."
  # Run command
  dockerCompose exec "${SERVICE_NAME}" sh -c "mysql -u root -p\${MYSQL_ROOT_PASSWORD} -e 'DROP DATABASE IF EXISTS ${DATABASE_NAME}; CREATE DATABASE ${DATABASE_NAME};'"
}

# Run command if this file is the command file
if [[ "${COMMAND_NAME}" == "${CURRENT_FILE_NAME}" ]]; then
  refresh
fi